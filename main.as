package {	// this is the GitzorCorpEngine for flash RPGs. I hope you like it. It's got alot of cool features. 	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.ui.*;	import flash.utils.*;	import flash.media.Sound;	import flash.net.Socket;	import fl.motion.easing.Back;	import flashx.textLayout.events.ModelChange;	public class main extends MovieClip	{		public var versionNumber:Number = 0.082;		//DO NOT MODIFY		public var hurt1:Sound = new hurt1l();		public var hurt2:Sound = new hurt2l();		public var oneks:Sound = new onek();		public var big:Sound = new biggun();		public var small:Sound = new smallgun();		public var med:Sound = new medgun();		public var achSound:Sound = new lvlup();		public var blipSnd:Sound = new blip();		public var kMes:Boolean = false;		public var eP:Boolean = false;		public var pA:Boolean = false;		public var lU:Boolean = false;		public var wU:Boolean = false;		public var mes1:Boolean = false;		public var mes2:Boolean = false;		public var monMes:Boolean = false;		public var delay:uint = 1200;		public static const defaultDelay:Number = 1200;		public var repeat:uint = 9;		public var exp:Number = 0;		public var shopping:Boolean = false;		public var shop:Object = new Object();		public var pCon:MovieClip = new MovieClip  ;		public var bCon:MovieClip = new MovieClip  ;		public var players:Object  = new Object();		public var buttons:Object = new Object();		public var sX:Number = 100;		public var sY:Number = 200;		public var pX:Number = 100;		public var pY:Number = 115;		public var eX:Number = 450;		public var eY:Number = 115;		public var xVel:Number = Math.floor(Math.random()*(4-(-3)))-3;		public var yVel:Number = -10;		public var yAcc:Number = 1;		public var yAccIn:Number = 0;		public var admin:Boolean = false;		public var roomValue1:Number = 0;//3		public var roomValue2:Number = 0;		public var killReq:Number = 0;		public var hudOn:Boolean = false;		public var creating:Boolean = false;		public var messageThere:Boolean = false;		public var attacked:Boolean = false;		public var ran:Number = ran;		public var ranDam:Number = 0;		public var killCount:Number = 0;		public var money:Number = 0;		public var locked:Boolean = false;		public var yhealth:Number = 300;		public var ehealth:Number = 0;		public var shopkeeper:Boolean = true;		public var player:Object = new Object();		public var objects:Object = new Object();		public var item:Object = new Object();		public var messageBox:Object = new Object();		public var enemy:Object = new Object();		public var gameStart:Boolean = false;		public var battle:Boolean = false;		public var enemyOnScreen:Boolean = false;		public var dead:Boolean = false;		public var worldMap:Array = new Array();		public var nameMap:Array = new Array();		public var readyToAttack:Boolean = false;		public var tTimer:Timer = new Timer(delay,repeat);		public var notBox:notifMC = new notifMC();		public var mTimer:Timer = new Timer(delay,repeat);		//DO NOT MODIFY		public function main()		{			inputLock(false);			level1.ver.text = String(versionNumber);			levelHUD.alpha = 0;			setVars();//loads your variables from the setvars function			addEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);//listens for the keydown press			input.text = "";//startup text			output.text = "enter play to start";//startup message			checkIf();//loads the check			loadMenu();//loads the right click menu			addChild(pCon);		}		public function setScreenWidth(width:Number = 550,height:Number = 400)		{			stage.stageWidth = width;			stage.stageHeight = height;		}		public function expTest(val:Number,monOrExp:String)		{			if (monOrExp == "exp")			{				exp = Math.floor(Math.random()*((val*100+50)-(val*100-100))+(val*100-100));			}			else if (monOrExp == "mon")			{				money = Math.floor(Math.random()*(val*10+5)-(val*10-10))+(val*10-10);				player.stats[3] +=  money;			}		}		public function messageFunction(picture:String,body:String,time:Number = defaultDelay,achPoint:Boolean = false)		{			if (!messageThere)			{				pCon.addChild(notBox);				notBox.x = 317;				notBox.y = 12;				notBox.notif.text = body;				notBox.notifPic.gotoAndStop(picture);				notBox.name = "notBox";				delay = time;				blipSnd.play();				mesTimer(false);				messageThere = true;			}		}		public function timeMan()		{			tTimer.start();			tTimer.addEventListener(TimerEvent.TIMER, tHandler);			tTimer.addEventListener(TimerEvent.TIMER_COMPLETE, completeHandler);		}		public function mesTimer(cancel:Boolean = false)		{			if (cancel)			{				if (pCon.getChildByName("notBox") != null)				{					mTimer.reset();					pCon.removeChild(notBox);					delay = defaultDelay;					messageThere = false;				}				else				{				}			}			else			{				mTimer.delay = delay;				mTimer.start();				mTimer.addEventListener(TimerEvent.TIMER, checkMes);				function checkMes()				{					mTimer.reset();					mesTimer(true);				}			}		}		public function tHandler(e:TimerEvent):void		{			if (enemyOnScreen && ! dead)			{				enemyAttack();				tTimer.reset();			}			else if (!enemyOnScreen && !dead)			{				if (kMes)				{					output.text = "you won!";					kMes = false;					mes1 = true;				}				else if (mes1)				{					output.text = "You gained " + exp + " expirience points";					mes1 = false;				}				else if (lU)				{					output.text = "You leveled up!";					achSound.play();					lU = false;					mes2 = true;				}				else if (mes2)				{					output.text = "You are now level " + player.stats[2];					mes2 = false;				}				else if (wU)				{					messageFunction("lvlup","Your " + player.savedInfo[0] + " got upgraded!",3000);					output.text = "Your " + player.savedInfo[0] + " got upgraded!";					wU = false;				}				else if (monMes)				{					output.text = "You just got $" + money;					monMes = false;				}				else if (!dead)				{					tTimer.reset();					battle = false;					level1.gotoAndStop(nameMap[roomValue1][roomValue2]);					attacked = false;					resetPos();					pCon.removeChild(players["enemy"]);					pCon.removeChild(players["aBut"]);					players["player1"].gotoAndStop(1);					output.text = "you defeated an enemy";					inputLock(false);				}			}		}		private function completeHandler(e:TimerEvent):void		{			battle = false;			level1.gotoAndStop(nameMap[roomValue1][roomValue2]);			attacked = false;			resetPos();			pCon.removeChild(players["enemy"]);			output.text = "you defeated an enemy";			inputLock(false);		}		public function cChar(nameD:String,headM:Number,shirtM:Number,pantsM:Number)		{			players[nameD].head1.gotoAndStop(headM);			players[nameD].shirt1.gotoAndStop(shirtM);			players[nameD].larm.gotoAndStop(shirtM);			players[nameD].rarm.gotoAndStop(shirtM);			players[nameD].lleg.gotoAndStop(pantsM);			players[nameD].rleg.gotoAndStop(pantsM);		}		public function gChar(nameS:String,headN:Number,shirtN:Number,pantsN:Number,x:Number,y:Number,flipped:Number)		{			players[nameS] = new nigger();			pCon.addChild(players[nameS]);			players[nameS].name = nameS;			players[nameS].head1.gotoAndStop(headN);			players[nameS].shirt1.gotoAndStop(shirtN);			players[nameS].larm.gotoAndStop(shirtN);			players[nameS].rarm.gotoAndStop(shirtN);			players[nameS].lleg.gotoAndStop(pantsN);			players[nameS].rleg.gotoAndStop(pantsN);			players[nameS].x = x;			players[nameS].y = y;			if (flipped == 1)			{				players[nameS].scaleX *=  -1;			}		}		public function keyDownListener(event : KeyboardEvent)		{			if (event.keyCode == Keyboard.ENTER)			{				checkIf();				clearInput();				if (! battle)				{					level1.gotoAndStop(nameMap[roomValue1][roomValue2]);				}				loadMenu();			}		}		public function uw()		{			player.inventory[0][2]++;			for (var i:int = 0; i <= player.pInventory.length-1; i++)			{				if (player.inventory[0][2] == player.pInventory[i][2] && player.inventory[0][3] == player.pInventory[i][3])				{					player.savedInfo = player.inventory[0].slice(0);					player.inventory[0] = player.pInventory[i].slice(0);					player.curwep = player.pInventory[i].slice(0);					players["player1"].hGun.gotoAndStop(player.inventory[0][5]);					wU = true;				}			}		}		public function loadMenu()		{			var myMenu:ContextMenu = new ContextMenu();			myMenu.hideBuiltInItems();			var madeBy:ContextMenuItem = new ContextMenuItem("RRR Organization");			madeBy.enabled = false;			var credits1:ContextMenuItem = new ContextMenuItem("Code Credit: RRRSkeeziod");			credits1.enabled = false;			var credits2:ContextMenuItem = new ContextMenuItem("Art Credit: HydraliskElite");			credits2.enabled = false;			var credits3:ContextMenuItem = new ContextMenuItem("Music Credit: CCCAgentCharles");			credits3.enabled = false;			var item1:ContextMenuItem = new ContextMenuItem(player.inventory[0][0]);			var item2:ContextMenuItem = new ContextMenuItem(player.inventory[1][0]);			var item3:ContextMenuItem = new ContextMenuItem(player.inventory[2][0]);			var item4:ContextMenuItem = new ContextMenuItem(player.inventory[3][0]);			var item5:ContextMenuItem = new ContextMenuItem(player.inventory[4][0]);			var killEn:ContextMenuItem = new ContextMenuItem("Kill the enemy");			var genEn:ContextMenuItem = new ContextMenuItem("Generate Enemy");			var curItem:ContextMenuItem = new ContextMenuItem("current item is " + player.curwep[0]);			curItem.enabled = false;			item1.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, switchWep );			item2.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, switchWep );			item3.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, switchWep );			item4.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, switchWep );			item5.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, switchWep );			killEn.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, switchWep );			genEn.addEventListener( ContextMenuEvent.MENU_ITEM_SELECT, switchWep );			myMenu.customItems.push(madeBy,credits1,credits2,credits3,curItem,item1,item2,item3,item4,item5,killEn);			credits1.separatorBefore = true;			curItem.separatorBefore = true;			item1.separatorBefore = true;			killEn.separatorBefore = true;			this.contextMenu = myMenu;			function switchWep(e:ContextMenuEvent)			{				if (e.target == item1)				{					player.curwep = player.inventory[0].slice(0);					players["player1"].hGun.gotoAndStop(player.inventory[0][5]);					output.text = "You changed to the " + player.curwep[0];				}				else if ( e.target == item2 )				{					player.curwep = player.inventory[0].slice(0);					player.inventory[0] = player.inventory[1].slice(0);					player.inventory[1] = player.curwep.slice(0);					player.curwep = player.inventory[0].slice(0);					players["player1"].hGun.gotoAndStop(player.inventory[0][5]);					output.text = "You changed to the " + player.curwep[0];				}				else if ( e.target == item3 )				{					player.curwep = player.inventory[0].slice(0);					player.inventory[0] = player.inventory[2].slice(0);					player.inventory[2] = player.curwep.slice(0);					player.curwep = player.inventory[0].slice(0);					players["player1"].hGun.gotoAndStop(player.inventory[0][5]);					output.text = "You changed to the " + player.curwep[0];				}				else if ( e.target == item4 )				{					player.curwep = player.inventory[0].slice(0);					player.inventory[0] = player.inventory[3].slice(0);					player.inventory[3] = player.curwep.slice(0);					player.curwep = player.inventory[0].slice(0);					players["player1"].hGun.gotoAndStop(player.inventory[0][5]);					output.text = "You changed to the " + player.curwep[0];				}				else if ( e.target == item5 )				{					player.curwep = player.inventory[0].slice(0);					player.inventory[0] = player.inventory[4].slice(0);					player.inventory[4] = player.curwep.slice(0);					player.curwep = player.inventory[0].slice(0);					players["player1"].hGun.gotoAndStop(player.inventory[0][5]);					output.text = "You changed to the " + player.curwep[0];				}				else if ( e.target == killEn )				{					ehealth = 0;					playerAttack();				}				else if ( e.target == genEn )				{					pCon.removeChild(players["enemy"]);					//dicks;					genRanEn();				}				loadMenu();				players["player1"].gotoAndStop(player.inventory[0][8]);			}			if (player.inventory[0][0] == "empty")			{				item1.enabled = false;			}			if (player.inventory[1][0] == "empty")			{				item2.enabled = false;			}			if (player.inventory[2][0] == "empty")			{				item3.enabled = false;			}			if (player.inventory[3][0] == "empty")			{				item4.enabled = false;			}			if (player.inventory[4][0] == "empty")			{				item5.enabled = false;			}			if (battle == false && enemyOnScreen == false && admin == false)			{				killEn.enabled = false;				genEn.enabled = false;			}			curItem.enabled = true;			curItem.enabled = false;		}		public function checkIf():void		{			var inputWords:Array = new Array  ;			inputWords = input.text.split(" ");			if (gameStart == true)			{				level1.killCount.text = String(killCount);				switch (input.text.toLowerCase())				{					case "maggie" :						messageFunction("heart","HI MAGGIE LOOK WHAT I DID",4000);						break;					case "no" :						output.text = "yes";						break;					case "trace room1" :						output.text = "yes master";						trace(roomValue1);						break;					case "trace room2" :						output.text = "yes master";						trace(roomValue2);						break;					case "tracemap" :						output.text = "yes master";						trace(worldMap[0]);						break;					case "currentmap" :						trace(worldMap[roomValue1][roomValue2]);						output.text = "yes master";						break;					case "is that guy a fag?" :						output.text = "Yeah he is";						break;					case "i'm a cheater" :						output.text = "Yes, yes you are.";						yhealth +=  600;						messageFunction("exclaim","You definitely are a cheater",5000,false);						break;					case "mom is gay" :						messageFunction("grenade","You shouldn't have said that, you're probably gonna die.",3000);						output.text = "no she isn't.";						break;					case "namemap" :						trace(nameMap[roomValue1][roomValue2]);						output.text = "yes master";						break;					case "dylan" :						messageFunction("grenade","DYLAN LIKES HARD PENIS",9001);						break;					case "rob" :						messageFunction("heart","You uncovered the mysterious chineseanonymous",4000);						break;					case "go right" :						if (worldMap[roomValue1][roomValue2 + 1] >= 1 && ! battle)						{							roomValue2++;							output.text = "You went right. You are at " + nameMap[roomValue1][roomValue2];							players["player1"].scaleX = 1;							players["player1"].x = sX;							players["player1"].y = sY;							roomTypes();						}						else if (worldMap[roomValue1][roomValue2 - 1] == undefined || creating == true)						{							output.text = "you can't go there";						}						else						{							output.text = "you can't go there";						}						break;					case "go left" :						if (worldMap[roomValue1][roomValue2 - 1] >= 1 && ! battle)						{							roomValue2--;							output.text = "You went left. You are at " + nameMap[roomValue1][roomValue2];							players["player1"].scaleX = -1;							players["player1"].x = 450;							players["player1"].y = 200;							roomTypes();						}						else if (worldMap[roomValue1][roomValue2 - 1] == undefined || creating == true)						{							output.text = "you can't go there";						}						else						{							output.text = "you can't go there";						}						break;					case "go up" :						if (worldMap[roomValue1 + 1][roomValue2] >= 1 && ! battle)						{							roomValue1++;							output.text = "You went up. You are at " + nameMap[roomValue1][roomValue2];							roomTypes();						}						else if (worldMap[roomValue1][roomValue2 - 1] == undefined || creating == true)						{							output.text = "you can't go there";						}						else						{							output.text = "you can't go there";						}						break;					case "go down" :						if (worldMap[roomValue1 - 1][roomValue2] >= 1 && ! battle)						{							roomValue1--;							output.text = "You went down. You are at " + nameMap[roomValue1][roomValue2];							roomTypes();						}						else if (worldMap[roomValue1][roomValue2 - 1] == undefined || creating == true)						{							output.text = "you can't go there";						}						else						{							output.text = "you can't go there";						}						break;						if (output.text == "you can't go there")						{							trace("blocked");						}					case "nigger" :						messageFunction("died","NAW NIGGA THAT AIN'T TRUE SHIT",8000);						output.text = "lol";						break;					case "debug" :						trace(player);						trace(player.clothing);						break;					case "show hud" :						levelHUD.alpha = 100;						hudOn = true;						output.text = "hud is on";						break;					case "showwepid":						var wepGui:MovieClip = new wepIds;						wepGui.x = 380;						wepGui.y = 27;						addChild(wepGui);						break;					case "hidewepid":						removeChild(wepGui);						break;					case "hide hud" :						levelHUD.alpha = 0;						hudOn = false;						output.text = "hud is off";						break;					case "draw" :						if (battle == true)						{							output.text = "Don't be silly.";						}						else						{							players["player1"].gotoAndStop(player.inventory[0][8]);						}						break;					case "onscreenstats" :						levelHUD.alpha = 100;						levelHUD.stats.text = "Movieclips in pCon: " + pCon.numChildren + "\n" + "Current health: " + yhealth + "\n" + "Kills: " + killCount + "\n" + "Room values are: " + roomValue1 + "," + roomValue2;						hudOn = true;						output.text = "stats are on screen";						break;					case "wepstats" :						levelHUD.stats.text = "Weapons" + "\n" + player.inventory[0][0] + ":   " + player.inventory[0][2] + "/" + player.pInventory[0][4] + "\n" + player.inventory[1][0] + ":   " + player.inventory[1][2] + "/" + player.inventory[1][4] + "\n" + player.inventory[2][0] + ":   " + player.inventory[2][2] + "/" + player.inventory[2][4] + "\n" + player.inventory[3][0] + ":   " + player.inventory[3][2] + "/" + player.inventory[3][4] + "\n" + player.inventory[4][0] + ":   " + player.inventory[4][2] + "/" + player.inventory[4][4];						output.text = "wepstats are on screen";						break;					case "dying" :						yhealth = 10;						break;					case "fullscreen hud" :						if (hudOn)						{							levelHUD.gotoAndStop(2);							output.text = "HUD is fullscreen.";						}						else						{							output.text = "the hud is not on";						}						break;					case "hank" :						cChar("player1",6,6,2);						yhealth = 300;						output.text = "you are now wearing the hank outfit";						break;					case "steve" :						messageFunction("gore","HEY YOU ASASFASFADGASD",6000);						break;					case "max" :						killReq = 2;						if (killCount >= killReq)						{							cChar("player1",1,4,2);							yhealth = 250;						}						else						{							output.text = "You need " + killReq + " kills to wear that.";						}						break;					case "ali":						messageFunction("exclaim","ALI? ALI IS NOT A NIGGER \n IM NOT LOLLOLOLOLOLOL",7000);						break;					case "jason" :						killReq = 0;						if (killCount >= killReq)						{							cChar("player1",5,5,2);							yhealth = 400;							shop.inventory[1] = player.pInventory[13].slice(0);						}						else						{							output.text = "You need " + killReq + " kills to wear that.";						}						break;					case "fight" :						if (worldMap[roomValue1][roomValue2] == 3)						{							battle = true;							level1.gotoAndStop("battle");						}						break;					case "fire" :						if (worldMap[roomValue1][roomValue2] == 2 && players["player1"].currentFrame == (player.inventory[0][8]) && shopkeeper == true)						{							players["player1"].gotoAndPlay(player.inventory[0][7]);							players["shopkeeper"].gotoAndPlay("shopdeath");							output.text = "uh oh.";							shopkeeper = false;						}						else if (players["player1"].currentFrame == (player.inventory[0][8]))						{							players["player1"].gotoAndPlay(player.inventory[0][7]);						}						else if (battle)						{							playerAttack();						}						break;					case "cwep "+player.inventory[0][2] :						trace("works");						break;					case "bossbattle":						if (worldMap[roomValue1][roomValue2] == 3)						{							enterBattle(true);							battle = true;							level1.gotoAndStop("battle");						}						break;					default :						output.text = "I don't know how to " + input.text;				}				for (var i:Number=0; i<=10; i++)				{				}				for (var a:Number=0; a<=player.inventory.length-1; a++)				{					if (inputWords[0] == "cwep" && inputWords[1] == player.inventory[a][0])					{						player.curwep = player.inventory[0].slice(0);						player.inventory[0] = player.inventory[a].slice(0);						player.inventory[a] = player.curwep.slice(0);						player.curwep = player.inventory[0].slice(0);						players["player1"].hGun.gotoAndStop(player.inventory[0][5]);						output.text = "Changed to the " + player.curwep[0];						trace(player.curwep[1]);					}					else if (inputWords[0] == "rrrskeeziod" && player.inventory[a][0] == "empty")					{						player.inventory[a] = player.pInventory[9];						output.text = "ADMIN PRIVELIGES";						admin = true;						break;					}					else if (inputWords[0] == "maggieprettypirate" && player.inventory[a][0] == "empty")					{						player.inventory[a] = player.pInventory[10];						output.text = ":D I LURVES YOU";						break;					}					else if (inputWords[0] == "maggieloveshugs" && player.inventory[a][0] == "empty")					{						player.inventory[a] = player.pInventory[11];						output.text = "HUG THEM TO DEATH";						break;					}					else if (inputWords[0] == "rrrchineseanonymous" && player.inventory[a][0] == "empty")					{						player.inventory[a][0] = "fire-axe";						player.inventory[a][1] = 9001;						output.text = "ADMIN PRIVELIGES";						admin = true;						break;					}					else if (inputWords[0] == "rrrchineseanonymous" || inputWords[0] == "rrrskeeziod" || inputWords[0] == "maggieprettyprate" || inputWords[0] == "maggieloveshugs")					{						output.text = "No more room in the inventory";					}				}				switch (inputWords[0])				{					case "setfloat" :						yAccIn = Number(inputWords[1] * 0.01);						output.text = "Set float to " + inputWords[1];						break;					case "getfloat" :						output.text = "Float is currently " + yAccIn;						break;				}				var inventWords:Array = new Array;				inventWords = player.pInventory;				if (inputWords[0] == "getwep")				{					for (var g:Number=0; g<=player.inventory.length-1; g++)					{						for (var o:Number = 0; o <= player.pInventory.length-1; o++)						{							if (inputWords[1] == player.pInventory[o][5] && player.inventory[g][0] == "empty")							{								output.text = player.pInventory[o][0] + " added";								player.inventory[g] = player.pInventory[o];								clearInput();								inputWords[1] = " ";								return;							}							if(inputWords[1] != player.pInventory[o][5]){								output.text = "No weapon of that ID exists";							}							if(player.inventory[4][0] != "empty"){								output.text = "Your inventory is full.";							}						}					}				}			}			if (! gameStart)			{				switch (input.text)				{					case "play" :						roomValue1 = 3;						roomValue2 = 1;						output.text = "you've awoken at " + nameMap[roomValue1][roomValue2];						gameStart = true;						gChar("player1",8,17,4,sX,sY,0);						level1.killCount.text = String(killCount);						players["player1"].hGun.gotoAndStop(player.inventory[0][5]);						messageFunction("exclaim","Hello! Welcome to the RRR RPG game engine. It's still a work in progress, but take a look around.", 7000);						break;					default :						output.text = "Enter play to start.";				}			}			if (battle)			{				enterBattle();				switch (input.text)				{					case "genen" ://debug genen						pCon.removeChild(players["enemy"]);						//remove the enemy;						genALen();//generate a new one						break;					case "galn" :						genALen(false);						break;					case "enat" :						enemyAttack();//enemy attack						break;					case "checkwep" :						output.text = "You are using " + player.curwep[0];						trace("the damage is "+player.curwep[1]);						break;					case "attack" :						playerAttack();						break;				}			}		}		public function enterBattle(boss:Boolean = false)		{			level1.yhealth.text = String(yhealth);				if (! enemyOnScreen && ! attacked)				{					players["player1"].scaleX = 1;					players["player1"].x = pX;					players["player1"].y = pY;					players["player1"].gotoAndStop(player.inventory[0][8]);					players["aBut"] = new aButton  ;					players["aBut"].x = 270;					players["aBut"].y = 300;					pCon.addChild(players["aBut"]);					players["aBut"].addEventListener(MouseEvent.CLICK,aButFunction);					function aButFunction()					{						if (! locked && enemyOnScreen)						{							playerAttack();						}					}					genALen(false);					genALen(true);					mesTimer(true);					output.text = "A level " + enemy.stats["level"][ran] + " enemy appeared";//battlestart message					if(boss){						output.text = "A boss appeared!";					}				}		}		public function genRanEn()		{			ran = (Math.floor(Math.random()*(enemy.stats["level"].length-1))+0);//the random level number			ehealth = enemy.stats["health"][ran];//set the enemy health to the random number of the level			var ranV1 = (Math.floor(Math.random()*(6)+1));//make random numbers			var ranV2 = (Math.floor(Math.random()*(11)+1));			var ranV3 = (Math.floor(Math.random()*(3)+1));			level1.ehealth.text = String(ehealth);//sync enemy health			level1.elevel.text = String(enemy.stats["level"][ran]);			enemyOnScreen = true;//the enemy is on the screen			output.text = "level " + enemy.stats["level"][ran] + " generated";			levelHUD.stats.text = "Enemy level = " + enemy.stats["level"][ran] + "\n" + "Enemy health = " + enemy.stats["health"][ran] + "\n" + "Enemy damage = " + enemy.stats["damage"][ran] + "\n" + "Enemy accuracy = " + enemy.stats["accuracy"][ran];			gChar("enemy",ranV1,ranV2,ranV3,eX,eY,1);//generate the random enemy		}		public function genALen(updateHealth:Boolean = false)		{			if (updateHealth == false)			{				ran = (Math.floor(Math.random()*((player.stats[2]+5)-(player.stats[2]+1))+player.stats[2]+1));//the random level number				ehealth = enemy.stats["health"][ran];//set the enemy health to the random number of the level				var ranV1 = (Math.floor(Math.random()* 5))+1;//make random numbers				var ranV2 = (Math.floor(Math.random()* 15))+1;				var ranV3 = (Math.floor(Math.random()* 2))+1;				level1.ehealth.text = String(ehealth);//sync enemy health				enemyOnScreen = true;//the enemy is on the screen				output.text = "level " + enemy.stats["level"][ran] + " generated";				level1.elevel.text = String(enemy.stats["level"][ran]);				levelHUD.stats.text = "Enemy level = " + enemy.stats["level"][ran] + "\n" + "Enemy health = " + enemy.stats["health"][ran] + "\n" + "Enemy damage = " + enemy.stats["damage"][ran] + "\n" + "Enemy accuracy = " + enemy.stats["accuracy"][ran];				gChar("enemy",ranV1,ranV2,ranV3,eX,eY,1);//generate the random enemy				players["enemy"].gotoAndStop(4);				players["enemy"].hGun.gotoAndStop(11);				ranDam =  Math.floor(Math.random()*((enemy.stats["damage"][ran]+(enemy.stats["level"][ran]*10))-(enemy.stats["damage"][ran]))+(enemy.stats["damage"][ran]));				trace(ranDam);			}			if (updateHealth == true)			{				level1.healthBar.healthBar.width = ((ehealth/enemy.stats["health"][ran])*100);				level1.playerBar.healthBar.width = ((yhealth/300)*100);			}		}		public function inputLock(lock:Boolean)		{			if (lock)			{				input.type = TextFieldType.DYNAMIC;				locked = true;			}			if (! lock)			{				input.type = TextFieldType.INPUT;				locked = false;			}		}		public function lvlUp()		{			for (var a:Number = 0; a <= player.levelExp[0].length; a++)			{				if (player.stats[2] == player.levelExp[0][a] && player.stats[1] >= player.levelExp[1][a])				{					player.stats[2] +=  1;					lU = true;					trace("leveldup");				}			}		}		public function roomTypes()		{			//SHOP			if (worldMap[roomValue1][roomValue2] == 2)			{				gChar("shopkeeper",7,7,3,450,223,0);				players["shopkeeper"].addEventListener(MouseEvent.CLICK,sayHi);				if (shopkeeper == false)				{					players["shopkeeper"].gotoAndStop(184);				}				function sayHi()				{					output.text = "Hello there. What you buying?";				}				objects["registor"] = new registor  ;				objects["registor"].x = 430;				objects["registor"].y = 248;				for (var d:Number = 0; d<=shop.inventory.length-1; d++)				{					if (shop.inventory[d] != "empty")					{						item[d] = new wep  ;						item[d].x = shop.positions[d];						item[d].y = 265.55;						item[d].gotoAndStop(shop.inventory[d][5]);						pCon.addChild(item[d]);						trace(item[d]);						item[d].addEventListener(MouseEvent.CLICK,removeThing);					}				}				function removeThing(e:MouseEvent)				{					for (var a:Number=0; a<=player.inventory.length-1; a++)					{						for (var b:Number = 0; b<=shop.inventory.length-1; b++)						{							if (player.inventory[a][0] == "empty" && item[b] == e.target)							{								pCon.removeChild(item[b]);								player.inventory[a] = shop.inventory[b].slice(0);								output.text = "You bought a " + shop.inventory[b][0];								if (player.curwep[0] == "empty")								{									player.curwep = player.inventory[0].slice(0);									players["player1"].hGun.gotoAndStop(player.inventory[0][5]);								}								shop.inventory[b] = player.pInventory[12].slice(0);								loadMenu();								break;							}							else if (player.inventory[a][7] != 0)							{								output.text = "Inventory is full.";								trace(shop.inventory[b]);								trace(player.inventory[a]);								break;								break;							}						}					}				}				players["player1"].y = 224;				players["player1"].x = sX;				players["player1"].scaleX = 1;				level1.gotoAndStop(nameMap[roomValue1][roomValue2]);				var ran1:Number = (Math.floor(Math.random()*10-1)+1);				level1.nigpic.gotoAndStop(ran1);				pCon.addChild(objects["registor"]);				shopping = true;			}			if (worldMap[roomValue1][roomValue2] == 3)			{				var ran15:Number = Math.floor(Math.random() * 99) + 1;				level1.gotoAndStop(nameMap[roomValue1][roomValue2]);				if (ran15 < 60)				{					battle = true;					level1.gotoAndStop("battle");				}				else				{				}			}			if (shopping == true && worldMap[roomValue1][roomValue2] != 2)			{				shopping = false;				pCon.removeChild(objects["registor"]);				pCon.removeChild(players["shopkeeper"]);				for (var b:Number = 0; b<=shop.inventory.length-1; b++)				{					if (shop.inventory[b][0] != "empty")					{						pCon.removeChild(item[b]);					}				}			}			//SHOP		}		public function cDamageMC(nameM:String,flipped:Boolean = false)		{			var xVel:Number = Math.floor(Math.random()*(5-(-5)))-2;			var yVel:Number = -10;			var yAcc:Number = 1;			var dMC:damageMC = new damageMC  ;			players[nameM].addChild(dMC);			if (flipped)			{				dMC.scaleX = -1;			}			dMC.ranDam.text = String(ranDam);			dMC.addEventListener(Event.ENTER_FRAME,onLoop);			function onLoop(evt:Event):void			{				dMC.x +=  xVel;				dMC.y +=  yVel;				yVel +=  yAcc;				yAcc -=  yAccIn;				if (dMC.currentFrame == 89 || dMC.y >= 220)				{					dMC.removeEventListener(Event.ENTER_FRAME,onLoop);					players[nameM].removeChild(dMC);					dMC = null;					trace("REMOVED");				}			}		}		public function playerAttack()		{			if (enemyOnScreen)			{				locked = true;				ranDam = Math.floor(Math.random()*(1+(player.curwep[1]+10)-(player.curwep[1])))+(player.curwep[1]);//the random number for the attack damage//deduct the enemy health by the ranDam				var framePos:Number = undefined;				players["player1"].addEventListener(Event.ENTER_FRAME, checkThings);				players["player1"].addEventListener(Event.ENTER_FRAME, checkFrames);				players["player1"].gotoAndPlay(player.inventory[0][7]);				function checkFrames()				{					if (players["enemy"].currentFrame == 163)					{						players["enemy"].gotoAndStop("knife");						players["enemy"].removeEventListener(Event.ENTER_FRAME, checkFrames);					}					else if (players["enemy"].currentFrame == 151)					{						players["enemy"].gotoAndStop("knife");						players["enemy"].removeEventListener(Event.ENTER_FRAME, checkFrames);					}				}				function checkThings(evt:Event)				{					switch (player.inventory[0][7])					{						case "knife" :							framePos = 16;							break;						case "pistol" :							framePos = 51;							break;						case "shotgun" :							framePos = 66;							break;					}					if (player.inventory[0][7] == "pistol")					{						var holdDam:Number = ranDam;						ranDam = Math.round(ranDam / 3);						switch (players["player1"].currentFrame)						{							case 41 :								ranDam = ranDam - 1;								cDamageMC("enemy",true);								break;							case 46 :								ranDam = ranDam;								cDamageMC("enemy",true);								break;							case 50 :								ranDam = ranDam + 1;								cDamageMC("enemy",true);								break;						}						ranDam = holdDam;					}					if (players["player1"].currentFrame == framePos)					{						var floats:Array = new Array(-3,-4,-5,3,4,5);						var bld:bloodSplurt = new bloodSplurt  ;						players["enemy"].addChild(bld);						if (player.inventory[0][7] != "pistol")						{							cDamageMC("enemy",true);						}						ehealth -=  ranDam;						var hitRan:Number = Math.floor(Math.random() * (1+2-1)) + 1;						players["enemy"].gotoAndPlay("hit"+hitRan);						if (ehealth <= 0)						{							trace("ded");							ehealth = 0;							yhealth +=  enemy.stats["level"][ran];//you add the health from the level of the last enemy killed							enemyOnScreen = false;//the enemy is gone							trace("enemy killed");							killCount++;							ehealth = 0;							level1.healthBar.healthBar.width = 0;							expTest(enemy.stats["level"][ran],"exp");							player.stats[1] +=  exp;							level1.ehealth.text = String(ehealth);//refresh the enemy health							var deathRan:Number = Math.floor(Math.random() * (1+2-1)) + 1;							players["enemy"].gotoAndPlay(enemy.deaths[deathRan - 1]);							var moneyChance:Number = undefined;							moneyChance = Math.floor(Math.random() * 99) + 1;							if (moneyChance > 0)							{								expTest(enemy.stats["level"][ran],"mon");								monMes = true;							}							kMes = true;							level1.killCount.text = String(killCount);//refresh killcount							uw();							lvlUp();							timeMan();						}						output.text = "You used the " + player.curwep[0] + " and did " + ranDam + " damage";						players["player1"].removeEventListener(Event.ENTER_FRAME, checkThings);						attacked = true;						level1.ehealth.text = String(ehealth);//reload the enemy health						genALen(true);						inputLock(true);						timeMan();					}				}			}			else if (!enemyOnScreen)			{				output.text = "No enemy to attack";			}		}		public function enemyAttack()		{			var missChance:Number = undefined;			missChance = Math.floor(Math.random() * 99) + 1;			var flinchChance:Number = undefined;			flinchChance = Math.floor(Math.random() * 99) + 1;			if (enemyOnScreen && missChance <= enemy.stats["accuracy"][ran])			{				trace("made it here");				ranDam =  Math.floor(Math.random()*((enemy.stats["damage"][ran]+(enemy.stats["level"][ran]*3))-(enemy.stats["damage"][ran]))+(enemy.stats["damage"][ran]));				output.text = "Enemy attacked and did " + ranDam + " damage.";				yhealth = yhealth - ranDam;				players["enemy"].gotoAndPlay("knife");				level1.yhealth.text = String(yhealth);				attacked = false;				cDamageMC("player1");				genALen(true);				hurt2.play();				inputLock(false);			}			else if (flinchChance < player.inventory[0][9])			{				output.text = "enemy flinched";				inputLock(false);			}			else if (missChance > enemy.stats["accuracy"][ran])			{				output.text = "Enemy missed";				inputLock(false);			}			else if (!enemyOnScreen)			{				output.text = "There is no enemy";			}//if the enemy isnt there, tell the player(although, this shouldnt be happening)			if (yhealth <= 0)			{				output.text = "Enemy has killed you";				yhealth = 0;				battle = false;				resetPos();//you get reset				players["player1"].gotoAndStop(2);				pCon.removeChild(players["enemy"]);				enemyOnScreen = false;				trace("you died");				level1.gotoAndStop(nameMap[roomValue1][roomValue2]);				dead = true;				inputLock(true);				death();			}		}		public function resetPos()		{			players["player1"].x = sX;			players["player1"].y = sY;		}		public function death()		{			level1.gotoAndStop("dead screen");			messageFunction("died","You died. Congratulations.",4000);			pCon.removeChild(players["player1"]);			players["player1"] = null;			roomValue1 = 0;//3			roomValue2 = 1;			gameStart = false;			battle = false;			dead = false;			shopkeeper = true;			pCon.removeChild(players["aBut"]);			setVars();			var myInterval = setInterval(function(){level1.gotoAndStop("title");killCount = 0;level1.killCount.text = String(killCount);clearInterval(myInterval);roomValue2 = 0;output.text = "enter play to start";inputLock(false);},1000);		}		public function clearInput():void		{			input.text = "";		}		public function setVars()		{			player.stats = new Array(300,0,1,0);//health,exp,level,cash			player.levelExp = new Array();			player.levelExp[0] = new Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);			player.levelExp[1] = new Array(500,1000,1750,2500,3250,4000,5000,6000,7500,10000,15000,20000);			player.inventory = new Array();			player.curwep = new Array();//current weapon, defined some other place			player.savedInfo = new Array();			player.pInventory = new Array();//possible inventory; iventory that actually exists in game			player.pInventory[0] = new Array("glock",30,0,0,5,1,small,"pistol",4);//name,damage,req,holdpos,tillnext,gotoandstop,sound,animation			player.pInventory[1] = new Array("beretta",45,2,0,10,2,med,"pistol",4);			player.pInventory[2] = new Array("desert eagle",60,4,0,"max",3,big,"pistol",4);			player.pInventory[3] = new Array("sawnoff",60,0,1,5,4,med,"shotgun",4);			player.pInventory[4] = new Array("pump shotgun",75,2,1,10,5,big,"shotgun",5);			player.pInventory[5] = new Array("auto shotgun",110,4,1,"max",6,big,"shotgun",5);			player.pInventory[6] = new Array("knife",10,0,2,5,7,hurt1,"knife",3);			player.pInventory[7] = new Array("bowie knife",35,1,2,10,8,hurt1,"knife",3);			player.pInventory[8] = new Array("katana",50,3,2,"max",9,hurt1,"knife",3);			player.pInventory[9] = new Array("ban hammer",1000,0,5,"max",10,oneks,"knife",3);			player.pInventory[10] = new Array("scimitar",300,0,6,"max",11,oneks,"knife",3);			player.pInventory[11] = new Array("hug!",1000000,0,6,"max",12,oneks,"knife",3);			player.pInventory[12] = new Array("empty",0,0,0,0,13,"N/A",0,0,0,0,0);			player.pInventory[13] = new Array("machete",50,0,8,"max",16,hurt1,"knife",3);			player.pInventory[14] = new Array("pickaxe",65,0,2,"max",14,hurt1,"knife",3);//name,damage,requirement			player.inventory = new Array();			player.inventory[0] = player.pInventory[0].slice(0);//item slots			player.inventory[1] = player.pInventory[12].slice(0);//usage: (name:String,damage:Number			player.inventory[2] = player.pInventory[12].slice(0);			player.inventory[3] = player.pInventory[12].slice(0);			player.inventory[4] = player.pInventory[12].slice(0);			player.curwep = player.inventory[0].slice(0);//definition of curwep			enemy.stats = new Array();			enemy.deaths = new Array("death1","death2");			enemy.stats["level"] = new Array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);//level			enemy.stats["health"] = new Array(100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300);//health			enemy.stats["damage"] = new Array(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110);//damage			enemy.stats["accuracy"] = new Array(70,71,72,73,74,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);//fixed it			shop.positions = new Array(180,240,300,360);			shop.inventory = new Array();			shop.inventory[0] = player.pInventory[10].slice(0);			shop.inventory[1] = player.pInventory[3].slice(0);			shop.inventory[2] = player.pInventory[6].slice(0);			shop.inventory[3] = player.pInventory[12].slice(0);			worldMap[0] = [0,0,0,0,0,0,0];//this is the map of the world 			worldMap[1] = [0,0,0,0,0,0,0];// 1 means accesible 0 means not accessible			worldMap[2] = [0,0,0,0,0,0,0];// 			worldMap[3] = [0,3,2,3,3,0,0];// 			worldMap[4] = [0,0,0,0,0,0,0];//			worldMap[5] = [0,0,0,0,0,0,0];			worldMap[6] = [0,0,0,0,0,0,0];			nameMap[0] = ["title","dead screen",0,0,0,0,0];//names for the maps			nameMap[1] = [0,0,0,0,0,0,0];//should have names where the ones are			nameMap[2] = [0,0,0,0,0,0,0];			nameMap[3] = [0,"your room","the shop","testroom","testroom",0,0];			nameMap[4] = [0,0,0,0,0,0,0];//etc			nameMap[5] = [0,0,0,0,0,0,0];			nameMap[6] = [0,0,0,0,0,0,0];			yhealth = 300;			level1.gotoAndStop(nameMap[roomValue1][roomValue2]);		}	}}