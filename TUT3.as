/* IN THE LAST TUTORIAL I MADE THE PROGRAM TEACH YOU ABOUT VARIABLES AND STRINGS NOW IMMA TEACH YOU ABOUT ARRAYS AND LOOPSArrays are basically databases. 0,0,1,1,1,0,0 etc. It's helpful because instead of haivngvar1 = nigvar2 = nignigvar3 = nignignigvar4 = nignignignigyou have vars:Array = new Array[nig,nignig,nignignig,nignignignig] that means vars[0]=nigvars[1]=nignigvars[2]=nignignigvars[3]=nignignignigas you can see that's really helpful. You can also go a bit further and use multidimensional arrays. Basically, instead ofvars[0]vars[1]etc. You get something like this.vars[0][0]vars[0][1]vars[0][2]vars[0][3]then you can go up in the first variable more. It's kind of hard to understand at first, but play with it, it makes all the difference. It's best to keep a list of what these things mean. Like, for example, in my upcoming game, I have one array with room data and shit right?		worldMap[1] = [{0},0,0,1,1,1,0];// 1,2,3,4,5,6		worldMap[2] = [0,0,0,1,0,1,0];// 7,8,9,10,11,12		worldMap[3] = [0,1,1,1,0,1,0];// 13,14,15,16,17		worldMap[4] = [0,0,0,1,0,1,0];//etc		worldMap[5] = [0,0,1,1,1,1,0];		worldMap[6] = [0,0,0,0,0,0,0];		and the name array 		nameMap[0] = ["title",0,0,0,0,0,0];		nameMap[1] = ["title",0,0,"field","some random house","spitfire",0];		nameMap[2] = [0,0,0,"don's house",0,"path",0];		nameMap[3] = [0,"your house","the hallway","marion",0,"waldo",0];		nameMap[4] = [0,0,0,"CANADA",0,"MEXICO",0];//etc		nameMap[5] = [0,0,"NEWFOUNDLAND","WD40","101 DALMO","AAAG",0];		nameMap[6] = [0,0,0,0,0,0,0];That means worldMap[1][0] = {0}.if i really wanted, i could have put this as worldMap[0][1][0], for better use of space in the code, and make nameMap worldMap[1][0][0]Understand what i'm saying here?Lets demonstrate. */package{	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.ui.*;	import flash.events.*; 	public class TUT3 extends MovieClip 	{		public var niggers:Array = new Array();//creates an empty array. We will fill it later.		public function TUT3()		{ 			loadArray(); // we call the loadArray function defined below		}		public function loadArray() // We make this function load the array(s). Basically, we define what's in them.		{			niggers = ["purple drank","chicken","stealin","watuhmelin","hoes","ali","jews","leif"]// the "" denotes a string. You can have values or strings in arrays. Doesn't matter.			/* This here thing means:			niggers[0] = "purple drank"			niggers[1] = "chicken"			etc.			So, lets say we want to trace this shit. But we only want to trace niggers[2].			so lets do that.			*/			trace(niggers[2])//This traces niggers[2]aka stealin.			/* BUT you may ask, HOW DO I TRACE EACH ONE ON A DIFFERENT LINE? Well, naive leif, it's quite simple. Just use a for loop. 			its use is like this			for(var i:Number=0;i<=niggers.length;i++)			that means, in human terms			for(initial value = 0;if i is less than or equal to the length of the niggers array minus one, because it's 0 based;i should add 1 to itself)			this will loop until the conditions are met. If they aren't met, it will loop forever. and flash will crash.			lets try it.			*NOTE: ARRAYS START AT ZERO. THEREFORE niggers[4] IS THE 5TH IN THE ARRAY, AND THE niggers.length WILL BE 5, EVEN THOUGH IT BEGINS AT 0. WE SUBTRACT 1			FOR THIS REASON.			*/			for(var i:Number = 0;i<=niggers.length-1;i++)			{//opens what happens until the conditions are met.				trace("niggers like "+niggers[i])//i is now the variable for increasing every times.			}		}	}}/* Run this, and you should get an output popup saying stealinniggers like purple drankniggers like chickenniggers like stealinniggers like watuhmelinniggers like hoes*/